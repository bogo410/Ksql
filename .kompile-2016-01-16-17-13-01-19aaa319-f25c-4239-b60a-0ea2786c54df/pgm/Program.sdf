module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free start-symbols
Add AddAttribute Stmts RenameColumnAttribute Attribute AddAttributes Attributes Values String Int Stmt DdropAttributes Bool Tables DzInt RenameColumnAttributes DzString DzBool DdropAttribute AlterCommands Columns Ddrop Float Type RenameTable AlterCommand Command Value Id DzFloat K
context-free syntax
    "CREATE DATABASE" InsertDzId ";" -> Stmt {cons("Stmt1205Syn")}
    DzString -> String {}
    "DROP COLUMN IF EXISTS" -> Ddrop {cons("Ddrop1333Syn")}
    "CREATE TABLE" InsertDzId "(" InsertDzAttributes ")" ";" -> Stmt {cons("Stmt1443Syn")}
    Stmt Stmts -> Stmts {cons("Stmts1334Syn")}
    Id Type -> Attribute {cons("Attribute170Syn")}
    {Id ","}* -> Tables {cons("Tables1ListSyn")}
    DzInt -> Int {}
    RenameColumnAttribute -> AlterCommand {}
    Stmt -> Stmts {}
    Add Attribute -> AddAttribute {cons("AddAttribute122Syn")}
    RenameTable -> AlterCommand {}
    DzFloat -> Float {}
    {Id ","}* -> Columns {cons("Columns1ListSyn")}
    {DdropAttribute ","}* -> DdropAttributes {cons("DdropAttributes1ListSyn")}
    Int -> Value {}
    "'" InsertDzString "'" -> Value {cons("Value1502Syn")}
    "DROP IF EXISTS" -> Ddrop {cons("Ddrop138Syn")}
    "ALTER TABLE" InsertDzId InsertDzAlterCommands ";" -> Stmt {cons("Stmt140Syn")}
    AddAttribute -> AlterCommand {}
    "ADD SCHEMA" InsertDzId "(" InsertDzAttributes ")" ";" -> Command {cons("Command1459Syn")}
    DzBool -> Bool {}
    Ddrop Id -> DdropAttribute {cons("DdropAttribute1303Syn")}
    "RENAME TO" Id -> RenameTable {cons("RenameTable1463Syn")}
    "ADD COLUMN" -> Add {cons("Add1405Syn")}
    "SMALLINT" -> Type {cons("Type1360Syn")}
    {Value ","}* -> Values {cons("Values1ListSyn")}
    {RenameColumnAttribute ","}* -> RenameColumnAttributes {cons("RenameColumnAttributes1ListSyn")}
    "INSERT INTO" InsertDzId "(" InsertDzColumns ")" "VALUES" "(" InsertDzValues ")" ";" -> Stmt {cons("Stmt1365Syn")}
    "RENAME COLUMN" InsertDzId "TO" Id -> RenameColumnAttribute {cons("RenameColumnAttribute1322Syn")}
    {AddAttribute ","}* -> AddAttributes {cons("AddAttributes1ListSyn")}
    "VARCHAR" -> Type {cons("Type157Syn")}
    DdropAttribute -> AlterCommand {}
    "DROP" -> Ddrop {cons("Ddrop1529Syn")}
    {Attribute ","}* -> Attributes {cons("Attributes1ListSyn")}
    "ADD" -> Add {cons("Add1474Syn")}
    "DROP COLUMN" -> Ddrop {cons("Ddrop1475Syn")}
    "DROP TABLE" InsertDzTables ";" -> Stmt {cons("Stmt165Syn")}
    {AlterCommand ","}* -> AlterCommands {cons("AlterCommands1ListSyn")}
    AlterCommands -> InsertDzAlterCommands
    Attributes -> InsertDzAttributes
    Values -> InsertDzValues
    Columns -> InsertDzColumns
    Tables -> InsertDzTables
    Id -> InsertDzId
    String -> InsertDzString


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    Add        -> K
    AddAttribute        -> K
    Stmts        -> K
    RenameColumnAttribute        -> K
    Attribute        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Bool        -> K
    DzInt        -> K
    DzString        -> K
    DzBool        -> K
    DdropAttribute        -> K
    Ddrop        -> K
    Float        -> K
    Type        -> K
    RenameTable        -> K
    AlterCommand        -> K
    Command        -> K
    Value        -> K
    Id        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "ADD" -> IdDz {reject}
    "DROP" -> IdDz {reject}
    "VALUES" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "SMALLINT" -> IdDz {reject}
    "true" -> IdDz {reject}
    "VARCHAR" -> IdDz {reject}
    "TO" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "ADD" -> IdDz {reject}
    "DROP" -> IdDz {reject}
    "VALUES" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "SMALLINT" -> IdDz {reject}
    "true" -> IdDz {reject}
    "VARCHAR" -> IdDz {reject}
    "TO" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
