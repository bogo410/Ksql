module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> Exp {}
    Bool -> Exp {}
    String -> Exp {}
    Id -> Exp {}
    "-" Exp -> Exp {cons("Exp1253Syn")}
} > { left:
    Exp "*" Exp -> Exp {left, cons("Exp1486Syn")}
    Exp "/" Exp -> Exp {left, cons("Exp1520Syn")}
} > { left:
    Exp "+" Exp -> Exp {left, cons("Exp1479Syn")}
    Exp "-" Exp -> Exp {left, cons("Exp1469Syn")}
} > { left:
    Exp "AND" Exp -> Exp {left, cons("Exp1305Syn")}
    Exp "OR" Exp -> Exp {left, cons("Exp1423Syn")}
}

context-free start-symbols
Add AddAttribute Stmts RenameColumnAttribute Attribute AddAttributes Attributes Values String Int Conditions Stmt DdropAttributes Substitution Bool Substitutions Tables DzInt RenameColumnAttributes Condition DzString DzBool DdropAttribute AlterCommands Columns Ddrop Float Type RenameTable AlterCommand Command Exps Value Id Exp AndOr DzFloat K
context-free syntax
    "CREATE DATABASE" InsertDzId ";" -> Stmt {cons("Stmt164Syn")}
    DzString -> String {}
    "DROP COLUMN IF EXISTS" -> Ddrop {cons("Ddrop1442Syn")}
    "CREATE TABLE" InsertDzId "(" InsertDzAttributes ")" ";" -> Stmt {cons("Stmt1507Syn")}
    Stmt Stmts -> Stmts {cons("Stmts1443Syn")}
    {Id ","}* -> Tables {cons("Tables1ListSyn")}
    RenameColumnAttribute -> AlterCommand {}
    "null" -> Value {cons("Value1222Syn")}
    Add Attribute -> AddAttribute {cons("AddAttribute15Syn")}
    DzFloat -> Float {}
    Id "=" "'" InsertDzInt "'" -> Condition {cons("Condition1525Syn")}
    Int -> Value {}
    Conditions InsertDzAndOr Conditions -> Conditions {cons("Conditions122Syn")}
    "DROP IF EXISTS" -> Ddrop {cons("Ddrop124Syn")}
    "ALTER TABLE" InsertDzId InsertDzAlterCommands ";" -> Stmt {cons("Stmt1334Syn")}
    AddAttribute -> AlterCommand {}
    "VARCHAR" "(" InsertDzInt ")" -> Type {cons("Type1335Syn")}
    "ADD SCHEMA" InsertDzId "(" InsertDzAttributes ")" ";" -> Command {cons("Command1530Syn")}
    Id "=" Exp -> Condition {cons("Condition1532Syn")}
    DzBool -> Bool {}
    "RENAME TO" Id -> RenameTable {cons("RenameTable1535Syn")}
    "(" InsertDzExp ")" -> Exp {cons("Exp1Bracket")}
    "SMALLINT" -> Type {cons("Type1462Syn")}
    "UPDATE" InsertDzId "SET" InsertDzSubstitutions "WHERE" InsertDzConditions ";" -> Stmt {cons("Stmt180Syn")}
    {Value ","}* -> Values {cons("Values1ListSyn")}
    "INSERT INTO" InsertDzId "(" InsertDzColumns ")" "VALUES" "(" InsertDzValues ")" ";" -> Stmt {cons("Stmt1464Syn")}
    {AddAttribute ","}* -> AddAttributes {cons("AddAttributes1ListSyn")}
    "VARCHAR" -> Type {cons("Type133Syn")}
    DdropAttribute -> AlterCommand {}
    "ADD" -> Add {cons("Add1539Syn")}
    "DROP COLUMN" -> Ddrop {cons("Ddrop1276Syn")}
    "DROP TABLE" InsertDzTables ";" -> Stmt {cons("Stmt1347Syn")}
    "AND" -> AndOr {cons("AndOr1277Syn")}
    {AlterCommand ","}* -> AlterCommands {cons("AlterCommands1ListSyn")}
    "OR" -> AndOr {cons("AndOr1237Syn")}
    Id Type -> Attribute {cons("Attribute1349Syn")}
    Id "=" "null" -> Substitution {cons("Substitution142Syn")}
    DzInt -> Int {}
    Id "=" Exp -> Substitution {cons("Substitution1420Syn")}
    Stmt -> Stmts {}
    RenameTable -> AlterCommand {}
    {Id ","}* -> Columns {cons("Columns1ListSyn")}
    {DdropAttribute ","}* -> DdropAttributes {cons("DdropAttributes1ListSyn")}
    Id "=" "'" InsertDzString "'" -> Condition {cons("Condition1552Syn")}
    "'" InsertDzString "'" -> Value {cons("Value1292Syn")}
    Id "=" "'" InsertDzString "'" -> Substitution {cons("Substitution1427Syn")}
    {Substitution ","}* -> Substitutions {cons("Substitutions1ListSyn")}
    Ddrop Id -> DdropAttribute {cons("DdropAttribute1432Syn")}
    "ADD COLUMN" -> Add {cons("Add1255Syn")}
    Condition -> Conditions {}
    {Exp ","}* -> Exps {cons("Exps1ListSyn")}
    {RenameColumnAttribute ","}* -> RenameColumnAttributes {cons("RenameColumnAttributes1ListSyn")}
    "RENAME COLUMN" InsertDzId "TO" Id -> RenameColumnAttribute {cons("RenameColumnAttribute1436Syn")}
    "DROP" -> Ddrop {cons("Ddrop1559Syn")}
    {Attribute ","}* -> Attributes {cons("Attributes1ListSyn")}
    Id "=" "'" InsertDzInt "'" -> Substitution {cons("Substitution163Syn")}
    AlterCommands -> InsertDzAlterCommands
    Substitutions -> InsertDzSubstitutions
    Attributes -> InsertDzAttributes
    Values -> InsertDzValues
    Columns -> InsertDzColumns
    Tables -> InsertDzTables
    Id -> InsertDzId
    String -> InsertDzString
    Exp -> InsertDzExp
    AndOr -> InsertDzAndOr
    Int -> InsertDzInt
    Conditions -> InsertDzConditions


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    Add        -> K
    AddAttribute        -> K
    Stmts        -> K
    RenameColumnAttribute        -> K
    Attribute        -> K
    String        -> K
    Int        -> K
    Conditions        -> K
    Stmt        -> K
    Substitution        -> K
    Bool        -> K
    DzInt        -> K
    Condition        -> K
    DzString        -> K
    DzBool        -> K
    DdropAttribute        -> K
    Ddrop        -> K
    Float        -> K
    Type        -> K
    RenameTable        -> K
    AlterCommand        -> K
    Command        -> K
    Value        -> K
    Id        -> K
    Exp        -> K
    AndOr        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "ADD" -> IdDz {reject}
    "SET" -> IdDz {reject}
    "DROP" -> IdDz {reject}
    "VALUES" -> IdDz {reject}
    "UPDATE" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "OR" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "WHERE" -> IdDz {reject}
    "null" -> IdDz {reject}
    "SMALLINT" -> IdDz {reject}
    "AND" -> IdDz {reject}
    "true" -> IdDz {reject}
    "VARCHAR" -> IdDz {reject}
    "TO" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "ADD" -> IdDz {reject}
    "SET" -> IdDz {reject}
    "DROP" -> IdDz {reject}
    "VALUES" -> IdDz {reject}
    "UPDATE" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "OR" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "WHERE" -> IdDz {reject}
    "null" -> IdDz {reject}
    "SMALLINT" -> IdDz {reject}
    "AND" -> IdDz {reject}
    "true" -> IdDz {reject}
    "VARCHAR" -> IdDz {reject}
    "TO" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
