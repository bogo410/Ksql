module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1240Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1294Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1474Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool175Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1462Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1289Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1555Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1248Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1502Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map1358Syn")}
} > {
    Map Map -> Map {left, cons("Map1392Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1298Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1366Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1298Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool1336Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1222Syn")}
    K "=/=K" K -> Bool {left, cons("Bool1366Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1555Syn")}
    "notBool" Bool -> Bool {cons("Bool1240Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1474Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1462Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1289Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool175Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1294Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool1336Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1222Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int185Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int146Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int1356Syn")}
    Int "/Int" Int -> Int {left, cons("Int1377Syn")}
    Int "%Int" Int -> Int {left, cons("Int1225Syn")}
    Int "divInt" Int -> Int {left, cons("Int1266Syn")}
    Int "modInt" Int -> Int {left, cons("Int1357Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1468Syn")}
    Int "-Int" Int -> Int {left, cons("Int196Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int176Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1398Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int184Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int157Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int156Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1466Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float16Syn")}
} > {
    Float "*Float" Float -> Float {left, cons("Float1385Syn")}
    Float "/Float" Float -> Float {left, cons("Float143Syn")}
    Float "%Float" Float -> Float {left, cons("Float1264Syn")}
} > {
    Float "+Float" Float -> Float {left, cons("Float1304Syn")}
    Float "-Float" Float -> Float {left, cons("Float1467Syn")}
}

context-free priorities
{
    Int -> Exp {}
    Bool -> Exp {}
    String -> Exp {}
    Id -> Exp {}
    "-" Exp -> Exp {cons("Exp1255Syn")}
} > { left:
    Exp "*" Exp -> Exp {left, cons("Exp1494Syn")}
    Exp "/" Exp -> Exp {left, cons("Exp1528Syn")}
} > { left:
    Exp "+" Exp -> Exp {left, cons("Exp1487Syn")}
    Exp "-" Exp -> Exp {left, cons("Exp1477Syn")}
} > { left:
    Exp "AND" Exp -> Exp {left, cons("Exp1308Syn")}
    Exp "OR" Exp -> Exp {left, cons("Exp1428Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Add -> K
    Attributes -> K
    Values -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Conditions -> K
    DdropAttributes -> K
    Substitution -> K
    Bool -> K
    List -> K
    Stream -> K
    DzString -> K
    DzBool -> K
    DdropAttribute -> K
    AlterCommands -> K
    Ddrop -> K
    Float -> K
    RenameTable -> K
    Exps -> K
    Value -> K
    Id -> K
    Map -> K
    AndOr -> K
    DzFloat -> K
    AddAttribute -> K
    Set -> K
    Variable -> K
    Stmts -> K
    RenameColumnAttribute -> K
    Attribute -> K
    MInt -> K
    AddAttributes -> K
    Int -> K
    Stmt -> K
    Char -> K
    Substitutions -> K
    Tables -> K
    TCPAnswer -> K
    DzInt -> K
    RenameColumnAttributes -> K
    Condition -> K
    PascalCaseId -> K
    UpperCase -> K
    Columns -> K
    TCPError -> K
    Type -> K
    AlterCommand -> K
    IOError -> K
    Command -> K
    Exp -> K
} .> {
    TCPError -> TCPAnswer
    DzInt -> Int
    Attribute -> Attributes
    Int -> Value
    AddAttribute -> AddAttributes
    AddAttribute -> AlterCommand
    Int -> Exp
    String -> Exp
    DdropAttribute -> DdropAttributes
    DzBool -> Bool
    Stmt -> Stmts
    Id -> Tables
    DzFloat -> Float
    RenameTable -> AlterCommand
    Condition -> Conditions
    Columns -> Exps
    Tables -> Exps
    RenameColumnAttributes -> AlterCommands
    Value -> Values
    Bool -> Exp
    IOError -> TCPError
    DzString -> String
    Id -> Columns
    String -> TCPAnswer
    AlterCommand -> AlterCommands
    AddAttributes -> AlterCommands
    RenameColumnAttribute -> AlterCommand
    Exp -> Exps
    DdropAttribute -> AlterCommand
    RenameColumnAttribute -> RenameColumnAttributes
    DdropAttributes -> AlterCommands
    Id -> Exp
    Substitution -> Substitutions
} .> {
    K -> Nat
    K -> Add
    K -> Attributes
    K -> Values
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Conditions
    K -> DdropAttributes
    K -> Substitution
    K -> Bool
    K -> List
    K -> Stream
    K -> DzString
    K -> DzBool
    K -> DdropAttribute
    K -> AlterCommands
    K -> Ddrop
    K -> Float
    K -> RenameTable
    K -> Exps
    K -> Value
    K -> Id
    K -> Map
    K -> AndOr
    K -> DzFloat
    K -> AddAttribute
    K -> Set
    K -> Variable
    K -> Stmts
    K -> RenameColumnAttribute
    K -> Attribute
    K -> MInt
    K -> AddAttributes
    K -> Int
    K -> Stmt
    K -> Char
    K -> Substitutions
    K -> Tables
    K -> TCPAnswer
    K -> DzInt
    K -> RenameColumnAttributes
    K -> Condition
    K -> PascalCaseId
    K -> UpperCase
    K -> Columns
    K -> TCPError
    K -> Type
    K -> AlterCommand
    K -> IOError
    K -> Command
    K -> Exp
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Add -> K
    Attributes -> K
    Values -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Conditions -> K
    DdropAttributes -> K
    Substitution -> K
    Bool -> K
    List -> K
    Stream -> K
    DzString -> K
    DzBool -> K
    DdropAttribute -> K
    AlterCommands -> K
    Ddrop -> K
    Float -> K
    RenameTable -> K
    Exps -> K
    Value -> K
    Id -> K
    Map -> K
    AndOr -> K
    DzFloat -> K
    AddAttribute -> K
    Set -> K
    Variable -> K
    Stmts -> K
    RenameColumnAttribute -> K
    Attribute -> K
    MInt -> K
    AddAttributes -> K
    Int -> K
    Stmt -> K
    Char -> K
    Substitutions -> K
    Tables -> K
    TCPAnswer -> K
    DzInt -> K
    RenameColumnAttributes -> K
    Condition -> K
    PascalCaseId -> K
    UpperCase -> K
    Columns -> K
    TCPError -> K
    Type -> K
    AlterCommand -> K
    IOError -> K
    Command -> K
    Exp -> K
} .> {
    K -> Nat
    K -> Add
    K -> Attributes
    K -> Values
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Conditions
    K -> DdropAttributes
    K -> Substitution
    K -> Bool
    K -> List
    K -> Stream
    K -> DzString
    K -> DzBool
    K -> DdropAttribute
    K -> AlterCommands
    K -> Ddrop
    K -> Float
    K -> RenameTable
    K -> Exps
    K -> Value
    K -> Id
    K -> Map
    K -> AndOr
    K -> DzFloat
    K -> AddAttribute
    K -> Set
    K -> Variable
    K -> Stmts
    K -> RenameColumnAttribute
    K -> Attribute
    K -> MInt
    K -> AddAttributes
    K -> Int
    K -> Stmt
    K -> Char
    K -> Substitutions
    K -> Tables
    K -> TCPAnswer
    K -> DzInt
    K -> RenameColumnAttributes
    K -> Condition
    K -> PascalCaseId
    K -> UpperCase
    K -> Columns
    K -> TCPError
    K -> Type
    K -> AlterCommand
    K -> IOError
    K -> Command
    K -> Exp
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Add
    K -> Attributes
    K -> Values
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Conditions
    K -> DdropAttributes
    K -> Substitution
    K -> Bool
    K -> List
    K -> Stream
    K -> DzString
    K -> DzBool
    K -> DdropAttribute
    K -> AlterCommands
    K -> Ddrop
    K -> Float
    K -> RenameTable
    K -> Exps
    K -> Value
    K -> Id
    K -> Map
    K -> AndOr
    K -> DzFloat
    K -> AddAttribute
    K -> Set
    K -> Variable
    K -> Stmts
    K -> RenameColumnAttribute
    K -> Attribute
    K -> MInt
    K -> AddAttributes
    K -> Int
    K -> Stmt
    K -> Char
    K -> Substitutions
    K -> Tables
    K -> TCPAnswer
    K -> DzInt
    K -> RenameColumnAttributes
    K -> Condition
    K -> PascalCaseId
    K -> UpperCase
    K -> Columns
    K -> TCPError
    K -> Type
    K -> AlterCommand
    K -> IOError
    K -> Command
    K -> Exp
} .> {
    Nat -> K
    Add -> K
    Attributes -> K
    Values -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Conditions -> K
    DdropAttributes -> K
    Substitution -> K
    Bool -> K
    List -> K
    Stream -> K
    DzString -> K
    DzBool -> K
    DdropAttribute -> K
    AlterCommands -> K
    Ddrop -> K
    Float -> K
    RenameTable -> K
    Exps -> K
    Value -> K
    Id -> K
    Map -> K
    AndOr -> K
    DzFloat -> K
    AddAttribute -> K
    Set -> K
    Variable -> K
    Stmts -> K
    RenameColumnAttribute -> K
    Attribute -> K
    MInt -> K
    AddAttributes -> K
    Int -> K
    Stmt -> K
    Char -> K
    Substitutions -> K
    Tables -> K
    TCPAnswer -> K
    DzInt -> K
    RenameColumnAttributes -> K
    Condition -> K
    PascalCaseId -> K
    UpperCase -> K
    Columns -> K
    TCPError -> K
    Type -> K
    AlterCommand -> K
    IOError -> K
    Command -> K
    Exp -> K
}
context-free syntax
    "uleMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool10Syn")}
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream1322Syn")}
    "#counter" -> Int {cons("Int12Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem13Syn")}
    K "inKList" KList -> Bool {cons("Bool1323Syn")}
    "sgeMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1324Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int14Syn")}
    "isKLabelConstant" "(" InsertDzKLabel ")" -> Bool {cons("Bool1325Syn")}
    "#EISDIR" -> IOError {cons("IOError1326Syn")}
    "K2Sort" "(" InsertDzK ")" -> String {cons("String1327Syn")}
    Add Attribute -> AddAttribute {cons("AddAttribute15Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map17Syn")}
    "isVariable" "(" InsertDzMap ")" -> Bool {cons("Bool1328Syn")}
    "#string2klist" "(" InsertDzString ")" -> KList {cons("KList1329Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map1330Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float1332Syn")}
    Map "=Map" Map -> Bool {cons("Bool18Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1333Syn")}
    Set "=Set" Set -> Bool {cons("Bool19Syn")}
    String "<String" String -> Bool {cons("Bool1334Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List120Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1335Syn")}
    Conditions InsertDzAndOr Conditions -> Conditions {cons("Conditions122Syn")}
    ".List" -> List {cons("List123Syn")}
    "DROP IF EXISTS" -> Ddrop {cons("Ddrop124Syn")}
    "#freshSymSortN" "(" InsertDzString "," InsertDzInt ")" -> K {cons("K125Syn")}
    "ALTER TABLE" InsertDzId InsertDzAlterCommands ";" -> Stmt {cons("Stmt1337Syn")}
    "VARCHAR" "(" InsertDzInt ")" -> Type {cons("Type1338Syn")}
    "addMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1339Syn")}
    "#EBADF" -> IOError {cons("IOError1340Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream126Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String127Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool1342Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool1343Syn")}
    "#stderr" -> Int {cons("Int1344Syn")}
    "miMInt" "(" InsertDzList ")" -> MInt {cons("MInt128Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool129Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int130Syn")}
    Map "-Map" Map -> Map {cons("Map1345Syn")}
    TCPError -> TCPAnswer {}
    "#checkTCPAnswer" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1346Syn")}
    AddAttribute "," AddAttributes -> AddAttributes {cons("AddAttributes1ListSyn")}
    ".AddAttributes" -> AddAttributes {cons("AddAttributes1Empty")}
    "ashrMInt" "(" InsertDzMInt "," InsertDzInt ")" -> MInt {cons("MInt132Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String1347Syn")}
    "VARCHAR" -> Type {cons("Type133Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String134Syn")}
    "saddMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List135Syn")}
    Set "-Set" Set -> Set {cons("Set136Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool1348Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel137Syn")}
    "isBounding" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1349Syn")}
    "DROP TABLE" InsertDzTables ";" -> Stmt {cons("Stmt1350Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream138Syn")}
    "#boundVars" "(" InsertDzK ")" -> K {cons("K1352Syn")}
    String "=/=String" String -> Bool {left, cons("Bool139Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id140Syn")}
    Id Type -> Attribute {cons("Attribute1353Syn")}
    Id "=" "null" -> Substitution {cons("Substitution142Syn")}
    "isNotAlreadyIn" "(" InsertDzId "," InsertDzValue "," InsertDzSet ")" -> Bool {cons("Bool1354Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel1355Syn")}
    "charControl" "(" InsertDzMap "," InsertDzColumns "," InsertDzValues ")" -> Bool {cons("Bool144Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int145Syn")}
    Id InsertDzType "PRIMARY KEY" -> Attribute {cons("Attribute147Syn")}
    "#distinctCounter" "(" InsertDzInt ")" -> Int {cons("Int148Syn")}
    DdropAttribute "," DdropAttributes -> DdropAttributes {cons("DdropAttributes1ListSyn")}
    ".DropAttributes" -> DdropAttributes {cons("DdropAttributes1Empty")}
    K "|->" K -> Map {cons("Map1358Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int149Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int1359Syn")}
    "andMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1360Syn")}
    "control" "(" InsertDzString "," InsertDzType ")" -> Bool {cons("Bool150Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map152Syn")}
    Int "=Int" Int -> Bool {cons("Bool1362Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List153Syn")}
    "String2Bag" "(" InsertDzString ")" -> Bag {cons("Bag154Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float155Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1363Syn")}
    "SAVE KEY" InsertDzId "(" InsertDzColumns ")" "VALUES" "(" InsertDzValues ")" ";" -> Command {cons("Command1364Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1365Syn")}
    Exp "," Exps -> Exps {cons("Exps1ListSyn")}
    ".Exps" -> Exps {cons("Exps1Empty")}
    "isSymbolicK" "(" InsertDzList ")" -> KItem {cons("KItem1367Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList1368Syn")}
    "shlMInt" "(" InsertDzMInt "," InsertDzInt ")" -> MInt {cons("MInt158Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String1369Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1370Syn")}
    "ugeMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool159Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float160Syn")}
    "#statTypes" "(" InsertDzKList ")" -> KList {cons("KList162Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList163Syn")}
    Id "=" "'" InsertDzInt "'" -> Substitution {cons("Substitution164Syn")}
    "CREATE DATABASE" InsertDzId ";" -> Stmt {cons("Stmt165Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool1372Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool166Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int167Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int168Syn")}
    "#tcpRequest" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1374Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1375Syn")}
    Id "," Tables -> Tables {cons("Tables1ListSyn")}
    ".Tables" -> Tables {cons("Tables1Empty")}
    "mi" "(" InsertDzInt "," InsertDzInt ")" -> MInt {cons("MInt169Syn")}
    "smaxMInt" "(" InsertDzInt ")" -> Int {cons("Int170Syn")}
    "uoverflowMInt" "(" InsertDzInt "," InsertDzInt ")" -> Bool {cons("Bool172Syn")}
    "#freshSymN" "(" InsertDzK "," InsertDzInt ")" -> K {cons("K1376Syn")}
    IOError -> TCPError {}
    "#string2Int" "(" InsertDzK ")" -> K {cons("K1378Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1379Syn")}
    Int -> Value {}
    "cool" "(" InsertDzK ")" -> K {cons("K174Syn")}
    "isVariable" "(" InsertDzSet ")" -> Bool {cons("Bool1380Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1382Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1383Syn")}
    "bitwidthMInt" "(" InsertDzMInt ")" -> Int {cons("Int1384Syn")}
    "String2Bool" "(" InsertDzTCPAnswer ")" -> Bool {cons("Bool177Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1386Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1387Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1388Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool178Syn")}
    Set "<=Set" Set -> Bool {cons("Bool179Syn")}
    KList "=KList" KList -> Bool {cons("Bool1389Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1390Syn")}
    Map Map -> Map {left, cons("Map1392Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1393Syn")}
    "negMInt" "(" InsertDzMInt ")" -> MInt {cons("MInt180Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1394Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1395Syn")}
    "udivMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1396Syn")}
    "UPDATE" InsertDzId "SET" InsertDzSubstitutions "WHERE" InsertDzConditions ";" -> Stmt {cons("Stmt182Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K183Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1397Syn")}
    "#noIO" -> Stream {cons("Stream1399Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1400Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1402Syn")}
    "isCollection" "(" InsertDzK ")" -> K {cons("K1403Syn")}
    "#freshVar" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1404Syn")}
    "#EACCES" -> IOError {cons("IOError1405Syn")}
    "subMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1406Syn")}
    List "=List" List -> Bool {cons("Bool186Syn")}
    "isLocalFreshVar" "(" InsertDzK ")" -> Bool {cons("Bool1407Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1408Syn")}
    DdropAttribute -> AlterCommand {}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1409Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1420Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int187Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String188Syn")}
    Set Set -> Set {left, cons("Set1422Syn")}
    "sminMInt" "(" InsertDzInt ")" -> Int {cons("Int1423Syn")}
    Map "[" InsertDzK "]" -> K {cons("K190Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1424Syn")}
    "ssubMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List192Syn")}
    "SMTLibQuery" "(" InsertDzBool ")" -> String {cons("String1425Syn")}
    Id "=" Exp -> Substitution {cons("Substitution1426Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1427Syn")}
    "xorMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt193Syn")}
    Stmt -> Stmts {}
    K "#inKList" KList -> Bool {cons("Bool1429Syn")}
    "Vars2SMTLib" "(" InsertDzSet ")" -> String {cons("String194Syn")}
    Id "," Columns -> Columns {cons("Columns1ListSyn")}
    ".Columns" -> Columns {cons("Columns1Empty")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1430Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1432Syn")}
    "isSymbolicBag" "(" InsertDzBag ")" -> KItem {cons("KItem195Syn")}
    Id "=" "'" InsertDzString "'" -> Substitution {cons("Substitution1433Syn")}
    "Bag2String" "(" InsertDzBag ")" -> String {cons("String197Syn")}
    Substitution "," Substitutions -> Substitutions {cons("Substitutions1ListSyn")}
    ".Substitutions" -> Substitutions {cons("Substitutions1Empty")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1434Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool198Syn")}
    "SMTCall" "(" InsertDzString ")" -> String {cons("String1435Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1436Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float199Syn")}
    "#getVars1" "(" InsertDzKList "," InsertDzSet ")" -> Set {cons("Set1200Syn")}
    Ddrop Id -> DdropAttribute {cons("DdropAttribute1437Syn")}
    "uremMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1438Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1202Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1439Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1203Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1440Syn")}
    "#binderSplit" "(" InsertDzK ")" -> K {cons("K1204Syn")}
    "mIntOfDigits" "(" InsertDzList ")" -> MInt {cons("MInt1205Syn")}
    "RENAME COLUMN" InsertDzId "TO" Id -> RenameColumnAttribute {cons("RenameColumnAttribute1442Syn")}
    KList "=/=KList" KList -> Bool {cons("Bool1206Syn")}
    "K2String" "(" InsertDzK ")" -> String {cons("String1443Syn")}
    "ugtMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1207Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1444Syn")}
    "zeroMInt" "(" InsertDzMInt ")" -> Bool {cons("Bool1445Syn")}
    "uminMInt" "(" InsertDzInt ")" -> Int {cons("Int1208Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1209Syn")}
    Attribute "," Attributes -> Attributes {cons("Attributes1ListSyn")}
    ".Attributes" -> Attributes {cons("Attributes1Empty")}
    "#systemTypes" "(" InsertDzKList ")" -> KItem {cons("KItem1446Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1220Syn")}
    "DROP COLUMN IF EXISTS" -> Ddrop {cons("Ddrop1447Syn")}
    Stmt Stmts -> Stmts {cons("Stmts1448Syn")}
    "isBound" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1450Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1452Syn")}
    "isVariable" "(" InsertDzBag ")" -> Bool {cons("Bool1453Syn")}
    RenameColumnAttribute -> AlterCommand {}
    "Consts2SMTLib" "(" InsertDzSet ")" -> String {cons("String1454Syn")}
    "UPDATE" InsertDzId "SET" InsertDzSubstitutions ";" -> Stmt {cons("Stmt1455Syn")}
    "null" -> Value {cons("Value1223Syn")}
    DzFloat -> Float {}
    "neMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1224Syn")}
    "checkKey" "(" InsertDzColumns "," InsertDzSet "," InsertDzValues "," InsertDzSet ")" -> Bool {cons("Bool1456Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1457Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1226Syn")}
    "#ELOOP" -> IOError {cons("IOError1227Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1228Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1229Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1458Syn")}
    AddAttribute -> AlterCommand {}
    "#stdin" -> Int {cons("Int1459Syn")}
    "##tcpRequest" "(" InsertDzString ")" -> String {cons("String1460Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1463Syn")}
    "K2SMTLib" "(" InsertDzK ")" -> String {cons("String1464Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1465Syn")}
    "size" "(" InsertDzBag ")" -> Int {cons("Int1230Syn")}
    "SMALLINT" -> Type {cons("Type1469Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1232Syn")}
    "uvalueMInt" "(" InsertDzMInt ")" -> Int {cons("Int1470Syn")}
    "smulMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1233Syn")}
    "INSERT INTO" InsertDzId "(" InsertDzColumns ")" "VALUES" "(" InsertDzValues ")" ";" -> Stmt {cons("Stmt1472Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1475Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1234Syn")}
    "ultMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1235Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1476Syn")}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1478Syn")}
    "svalueMInt" "(" InsertDzMInt ")" -> Int {cons("Int1479Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1480Syn")}
    ".Set" -> Set {cons("Set1482Syn")}
    "sgtMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1236Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1237Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1238Syn")}
    "OR" -> AndOr {cons("AndOr1239Syn")}
    List List -> List {left, cons("List1483Syn")}
    "sMinMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1242Syn")}
    "size" "(" InsertDzColumns ")" -> Int {cons("Int1243Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1244Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1484Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1485Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1245Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1246Syn")}
    String "==String" String -> Bool {left, cons("Bool1247Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1486Syn")}
    String "+String" String -> String {left, cons("String1249Syn")}
    String ">=String" String -> Bool {cons("Bool1488Syn")}
    "sdivMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1489Syn")}
    K "in" Set -> Bool {cons("Bool1250Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1490Syn")}
    ".Map" -> Map {cons("Map1252Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1253Syn")}
    KList "==KList" KList -> Bool {cons("Bool1254Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1492Syn")}
    String -> TCPAnswer {}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1493Syn")}
    "ADD COLUMN" -> Add {cons("Add1257Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1258Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1495Syn")}
    "concatenateMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1259Syn")}
    "lshrMInt" "(" InsertDzMInt "," InsertDzInt ")" -> MInt {cons("MInt1496Syn")}
    "sltMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1497Syn")}
    "digitsOfMInt" "(" InsertDzMInt "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1498Syn")}
    "#ENOENT" -> IOError {cons("IOError1499Syn")}
    "usubMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1500Syn")}
    "size" "(" InsertDzValues ")" -> Int {cons("Int1503Syn")}
    "#EINVAL" -> IOError {cons("IOError1504Syn")}
    String ">String" String -> Bool {cons("Bool1505Syn")}
    "umaxMInt" "(" InsertDzInt ")" -> Int {cons("Int1506Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1260Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1507Syn")}
    "sremMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1508Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1262Syn")}
    "#freshSym" "(" InsertDzK ")" -> K {cons("K1509Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1263Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1520Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1522Syn")}
    "String2K" "(" InsertDzString ")" -> K {cons("K1265Syn")}
    "getVariables" "(" InsertDzK ")" -> Set {cons("Set1523Syn")}
    "#stdout" -> Int {cons("Int1524Syn")}
    "CREATE TABLE" InsertDzId "(" InsertDzAttributes ")" ";" -> Stmt {cons("Stmt1525Syn")}
    "#tcpError" "(" InsertDzString ")" -> TCPError {cons("TCPError1526Syn")}
    "#noparse" -> IOError {cons("IOError1527Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1267Syn")}
    "extractMInt" "(" InsertDzMInt "," InsertDzInt "," InsertDzInt ")" -> MInt {cons("MInt1529Syn")}
    "checkSat" "(" InsertDzBool ")" -> String {cons("String1532Syn")}
    "exists" InsertDzSet "." Bool -> Bool {cons("Bool1268Syn")}
    Id "=" "'" InsertDzInt "'" -> Condition {cons("Condition1533Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1534Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1536Syn")}
    "isVariable" "(" InsertDzList ")" -> Bool {cons("Bool1269Syn")}
    "$mi" "(" InsertDzInt "," InsertDzInt ")" -> MInt {cons("MInt1270Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1537Syn")}
    "ADD SCHEMA" InsertDzId "(" InsertDzAttributes ")" ";" -> Command {cons("Command1538Syn")}
    Id "=" Exp -> Condition {cons("Condition1539Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1540Syn")}
    "#getVars" "(" InsertDzK ")" -> Set {cons("Set1542Syn")}
    "RENAME TO" Id -> RenameTable {cons("RenameTable1543Syn")}
    "freeVariables" "(" InsertDzKList ")" -> Set {cons("Set1272Syn")}
    "#getSymLabel" "(" InsertDzString ")" -> K {cons("K1544Syn")}
    "#freshVar1" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1273Syn")}
    "updateValues" "(" InsertDzBagItem "," InsertDzSubstitution ")" -> BagItem {cons("BagItem1274Syn")}
    KResult -> KItem {}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1275Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1276Syn")}
    Value "," Values -> Values {cons("Values1ListSyn")}
    ".Values" -> Values {cons("Values1Empty")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1277Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1545Syn")}
    "orMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1546Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1278Syn")}
    "ADD" -> Add {cons("Add1547Syn")}
    "DROP COLUMN" -> Ddrop {cons("Ddrop1279Syn")}
    "AND" -> AndOr {cons("AndOr1280Syn")}
    AlterCommand "," AlterCommands -> AlterCommands {cons("AlterCommands1ListSyn")}
    ".AlterCommands" -> AlterCommands {cons("AlterCommands1Empty")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1282Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1548Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1549Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1550Syn")}
    "sleMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1283Syn")}
    "#retrieveTCPError" "(" InsertDzString ")" -> String {cons("String1552Syn")}
    "#boundVars1" "(" InsertDzK ")" -> Set {cons("Set1284Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1285Syn")}
    "umulMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1553Syn")}
    String "<=String" String -> Bool {cons("Bool1286Syn")}
    "#EOF" -> IOError {cons("IOError1554Syn")}
    "mulMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1287Syn")}
    "insertValues" "(" InsertDzColumns "," InsertDzValues "," InsertDzMap ")" -> Map {cons("Map1556Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1557Syn")}
    RenameTable -> AlterCommand {}
    "#splitedBinder" "(" InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> KItem {cons("KItem1288Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1558Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1290Syn")}
    "countAllOccurences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1292Syn")}
    "#isTCPError" "(" InsertDzString ")" -> Bool {cons("Bool1293Syn")}
    Id "=" "'" InsertDzString "'" -> Condition {cons("Condition1559Syn")}
    K "in" Bag -> Bool {cons("Bool1560Syn")}
    "overflowMInt" "(" InsertDzList ")" -> Bool {cons("Bool1562Syn")}
    "sMaxMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> MInt {cons("MInt1563Syn")}
    "'" InsertDzString "'" -> Value {cons("Value1295Syn")}
    "soverflowMInt" "(" InsertDzInt "," InsertDzInt ")" -> Bool {cons("Bool1296Syn")}
    K "=K" K -> Bool {cons("Bool1297Syn")}
    "#binderSplit1" "(" InsertDzKLabel "," InsertDzInt "," InsertDzKList "," InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> K {cons("K1564Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1565Syn")}
    "#freshSymSort" "(" InsertDzString ")" -> K {cons("K1299Syn")}
    "#ESPIPE" -> IOError {cons("IOError1566Syn")}
    "uaddMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> List {cons("List1300Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1302Syn")}
    "forall" InsertDzSet "." Bool -> Bool {cons("Bool1303Syn")}
    Condition -> Conditions {}
    RenameColumnAttribute "," RenameColumnAttributes -> RenameColumnAttributes {cons("RenameColumnAttributes1ListSyn")}
    ".RenameColumnAttributes" -> RenameColumnAttributes {cons("RenameColumnAttributes1Empty")}
    K "in" List -> Bool {cons("Bool1567Syn")}
    "String2DotK" "(" InsertDzTCPAnswer ")" -> K {cons("K1305Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1306Syn")}
    "eqMInt" "(" InsertDzMInt "," InsertDzMInt ")" -> Bool {cons("Bool1307Syn")}
    "DROP" -> Ddrop {cons("Ddrop1568Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1309Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1320Syn")}
    Set -> InsertDzSet
    MInt -> InsertDzMInt
    Values -> InsertDzValues
    Attributes -> InsertDzAttributes
    K -> InsertDzK
    String -> InsertDzString
    KList -> InsertDzKList
    Int -> InsertDzInt
    Conditions -> InsertDzConditions
    Substitution -> InsertDzSubstitution
    Bool -> InsertDzBool
    Char -> InsertDzChar
    Substitutions -> InsertDzSubstitutions
    Tables -> InsertDzTables
    List -> InsertDzList
    TCPAnswer -> InsertDzTCPAnswer
    AlterCommands -> InsertDzAlterCommands
    Columns -> InsertDzColumns
    Bag -> InsertDzBag
    KLabel -> InsertDzKLabel
    Float -> InsertDzFloat
    Type -> InsertDzType
    BagItem -> InsertDzBagItem
    Value -> InsertDzValue
    Id -> InsertDzId
    Map -> InsertDzMap
    AndOr -> InsertDzAndOr
    KItem -> InsertDzKItem

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Add"    -> VariableDz    {cons("Add1Cast")}
     K CastTypeDz "Add{" TagListDz "}"    -> VariableDz    {cons("Add1CastAttr")}
     K CastTypeDz "Attributes"    -> VariableDz    {cons("Attributes1Cast")}
     K CastTypeDz "Attributes{" TagListDz "}"    -> VariableDz    {cons("Attributes1CastAttr")}
     K CastTypeDz "Values"    -> VariableDz    {cons("Values1Cast")}
     K CastTypeDz "Values{" TagListDz "}"    -> VariableDz    {cons("Values1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Conditions"    -> VariableDz    {cons("Conditions1Cast")}
     K CastTypeDz "Conditions{" TagListDz "}"    -> VariableDz    {cons("Conditions1CastAttr")}
     K CastTypeDz "DropAttributes"    -> VariableDz    {cons("DdropAttributes1Cast")}
     K CastTypeDz "DropAttributes{" TagListDz "}"    -> VariableDz    {cons("DdropAttributes1CastAttr")}
     K CastTypeDz "Substitution"    -> VariableDz    {cons("Substitution1Cast")}
     K CastTypeDz "Substitution{" TagListDz "}"    -> VariableDz    {cons("Substitution1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "DropAttribute"    -> VariableDz    {cons("DdropAttribute1Cast")}
     K CastTypeDz "DropAttribute{" TagListDz "}"    -> VariableDz    {cons("DdropAttribute1CastAttr")}
     K CastTypeDz "AlterCommands"    -> VariableDz    {cons("AlterCommands1Cast")}
     K CastTypeDz "AlterCommands{" TagListDz "}"    -> VariableDz    {cons("AlterCommands1CastAttr")}
     K CastTypeDz "Drop"    -> VariableDz    {cons("Ddrop1Cast")}
     K CastTypeDz "Drop{" TagListDz "}"    -> VariableDz    {cons("Ddrop1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "RenameTable"    -> VariableDz    {cons("RenameTable1Cast")}
     K CastTypeDz "RenameTable{" TagListDz "}"    -> VariableDz    {cons("RenameTable1CastAttr")}
     K CastTypeDz "Exps"    -> VariableDz    {cons("Exps1Cast")}
     K CastTypeDz "Exps{" TagListDz "}"    -> VariableDz    {cons("Exps1CastAttr")}
     K CastTypeDz "Value"    -> VariableDz    {cons("Value1Cast")}
     K CastTypeDz "Value{" TagListDz "}"    -> VariableDz    {cons("Value1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "AndOr"    -> VariableDz    {cons("AndOr1Cast")}
     K CastTypeDz "AndOr{" TagListDz "}"    -> VariableDz    {cons("AndOr1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     K CastTypeDz "AddAttribute"    -> VariableDz    {cons("AddAttribute1Cast")}
     K CastTypeDz "AddAttribute{" TagListDz "}"    -> VariableDz    {cons("AddAttribute1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "Variable"    -> VariableDz    {cons("Variable1Cast")}
     K CastTypeDz "Variable{" TagListDz "}"    -> VariableDz    {cons("Variable1CastAttr")}
     K CastTypeDz "Stmts"    -> VariableDz    {cons("Stmts1Cast")}
     K CastTypeDz "Stmts{" TagListDz "}"    -> VariableDz    {cons("Stmts1CastAttr")}
     K CastTypeDz "RenameColumnAttribute"    -> VariableDz    {cons("RenameColumnAttribute1Cast")}
     K CastTypeDz "RenameColumnAttribute{" TagListDz "}"    -> VariableDz    {cons("RenameColumnAttribute1CastAttr")}
     K CastTypeDz "Attribute"    -> VariableDz    {cons("Attribute1Cast")}
     K CastTypeDz "Attribute{" TagListDz "}"    -> VariableDz    {cons("Attribute1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "AddAttributes"    -> VariableDz    {cons("AddAttributes1Cast")}
     K CastTypeDz "AddAttributes{" TagListDz "}"    -> VariableDz    {cons("AddAttributes1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Substitutions"    -> VariableDz    {cons("Substitutions1Cast")}
     K CastTypeDz "Substitutions{" TagListDz "}"    -> VariableDz    {cons("Substitutions1CastAttr")}
     K CastTypeDz "Tables"    -> VariableDz    {cons("Tables1Cast")}
     K CastTypeDz "Tables{" TagListDz "}"    -> VariableDz    {cons("Tables1CastAttr")}
     K CastTypeDz "TCPAnswer"    -> VariableDz    {cons("TCPAnswer1Cast")}
     K CastTypeDz "TCPAnswer{" TagListDz "}"    -> VariableDz    {cons("TCPAnswer1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "RenameColumnAttributes"    -> VariableDz    {cons("RenameColumnAttributes1Cast")}
     K CastTypeDz "RenameColumnAttributes{" TagListDz "}"    -> VariableDz    {cons("RenameColumnAttributes1CastAttr")}
     K CastTypeDz "Condition"    -> VariableDz    {cons("Condition1Cast")}
     K CastTypeDz "Condition{" TagListDz "}"    -> VariableDz    {cons("Condition1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "Columns"    -> VariableDz    {cons("Columns1Cast")}
     K CastTypeDz "Columns{" TagListDz "}"    -> VariableDz    {cons("Columns1CastAttr")}
     K CastTypeDz "TCPError"    -> VariableDz    {cons("TCPError1Cast")}
     K CastTypeDz "TCPError{" TagListDz "}"    -> VariableDz    {cons("TCPError1CastAttr")}
     K CastTypeDz "Type"    -> VariableDz    {cons("Type1Cast")}
     K CastTypeDz "Type{" TagListDz "}"    -> VariableDz    {cons("Type1CastAttr")}
     K CastTypeDz "AlterCommand"    -> VariableDz    {cons("AlterCommand1Cast")}
     K CastTypeDz "AlterCommand{" TagListDz "}"    -> VariableDz    {cons("AlterCommand1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Command"    -> VariableDz    {cons("Command1Cast")}
     K CastTypeDz "Command{" TagListDz "}"    -> VariableDz    {cons("Command1CastAttr")}
     K CastTypeDz "Exp"    -> VariableDz    {cons("Exp1Cast")}
     K CastTypeDz "Exp{" TagListDz "}"    -> VariableDz    {cons("Exp1CastAttr")}
     K CastTypeDz "K"        -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"    -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}
     NatDzVar   -> Nat
     AddDzVar   -> Add
     AttributesDzVar   -> Attributes
     ValuesDzVar   -> Values
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     ConditionsDzVar   -> Conditions
     DdropAttributesDzVar   -> DdropAttributes
     SubstitutionDzVar   -> Substitution
     BoolDzVar   -> Bool
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     DdropAttributeDzVar   -> DdropAttribute
     AlterCommandsDzVar   -> AlterCommands
     DdropDzVar   -> Ddrop
     FloatDzVar   -> Float
     RenameTableDzVar   -> RenameTable
     ExpsDzVar   -> Exps
     ValueDzVar   -> Value
     IdDzVar   -> Id
     MapDzVar   -> Map
     AndOrDzVar   -> AndOr
     DzFloatDzVar   -> DzFloat
     AddAttributeDzVar   -> AddAttribute
     SetDzVar   -> Set
     VariableDzVar   -> Variable
     StmtsDzVar   -> Stmts
     RenameColumnAttributeDzVar   -> RenameColumnAttribute
     AttributeDzVar   -> Attribute
     MIntDzVar   -> MInt
     AddAttributesDzVar   -> AddAttributes
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     CharDzVar   -> Char
     SubstitutionsDzVar   -> Substitutions
     TablesDzVar   -> Tables
     TCPAnswerDzVar   -> TCPAnswer
     DzIntDzVar   -> DzInt
     RenameColumnAttributesDzVar   -> RenameColumnAttributes
     ConditionDzVar   -> Condition
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     ColumnsDzVar   -> Columns
     TCPErrorDzVar   -> TCPError
     TypeDzVar   -> Type
     AlterCommandDzVar   -> AlterCommand
     IOErrorDzVar   -> IOError
     CommandDzVar   -> Command
     ExpDzVar   -> Exp

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "#token" -> DzKLabel
    "#symEqualitySort" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat
    "isBinder" -> DzKLabel


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isAdd"      -> DzKLabel
    "isSymbolicAdd"      -> DzKLabel
    "#symAdd"      -> DzKLabel
    "isAttributes"      -> DzKLabel
    "isSymbolicAttributes"      -> DzKLabel
    "#symAttributes"      -> DzKLabel
    "isValues"      -> DzKLabel
    "isSymbolicValues"      -> DzKLabel
    "#symValues"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isConditions"      -> DzKLabel
    "isSymbolicConditions"      -> DzKLabel
    "#symConditions"      -> DzKLabel
    "isDropAttributes"      -> DzKLabel
    "isSymbolicDropAttributes"      -> DzKLabel
    "#symDropAttributes"      -> DzKLabel
    "isSubstitution"      -> DzKLabel
    "isSymbolicSubstitution"      -> DzKLabel
    "#symSubstitution"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isDropAttribute"      -> DzKLabel
    "isSymbolicDropAttribute"      -> DzKLabel
    "#symDropAttribute"      -> DzKLabel
    "isAlterCommands"      -> DzKLabel
    "isSymbolicAlterCommands"      -> DzKLabel
    "#symAlterCommands"      -> DzKLabel
    "isDrop"      -> DzKLabel
    "isSymbolicDrop"      -> DzKLabel
    "#symDrop"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isRenameTable"      -> DzKLabel
    "isSymbolicRenameTable"      -> DzKLabel
    "#symRenameTable"      -> DzKLabel
    "isExps"      -> DzKLabel
    "isSymbolicExps"      -> DzKLabel
    "#symExps"      -> DzKLabel
    "isValue"      -> DzKLabel
    "isSymbolicValue"      -> DzKLabel
    "#symValue"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "isAndOr"      -> DzKLabel
    "isSymbolicAndOr"      -> DzKLabel
    "#symAndOr"      -> DzKLabel
    "is#Float"      -> DzKLabel
    "isAddAttribute"      -> DzKLabel
    "isSymbolicAddAttribute"      -> DzKLabel
    "#symAddAttribute"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isVariable"      -> DzKLabel
    "isSymbolicVariable"      -> DzKLabel
    "#symVariable"      -> DzKLabel
    "isStmts"      -> DzKLabel
    "isSymbolicStmts"      -> DzKLabel
    "#symStmts"      -> DzKLabel
    "isRenameColumnAttribute"      -> DzKLabel
    "isSymbolicRenameColumnAttribute"      -> DzKLabel
    "#symRenameColumnAttribute"      -> DzKLabel
    "isAttribute"      -> DzKLabel
    "isSymbolicAttribute"      -> DzKLabel
    "#symAttribute"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isAddAttributes"      -> DzKLabel
    "isSymbolicAddAttributes"      -> DzKLabel
    "#symAddAttributes"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isSubstitutions"      -> DzKLabel
    "isSymbolicSubstitutions"      -> DzKLabel
    "#symSubstitutions"      -> DzKLabel
    "isTables"      -> DzKLabel
    "isSymbolicTables"      -> DzKLabel
    "#symTables"      -> DzKLabel
    "isTCPAnswer"      -> DzKLabel
    "isSymbolicTCPAnswer"      -> DzKLabel
    "#symTCPAnswer"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "isRenameColumnAttributes"      -> DzKLabel
    "isSymbolicRenameColumnAttributes"      -> DzKLabel
    "#symRenameColumnAttributes"      -> DzKLabel
    "isCondition"      -> DzKLabel
    "isSymbolicCondition"      -> DzKLabel
    "#symCondition"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isColumns"      -> DzKLabel
    "isSymbolicColumns"      -> DzKLabel
    "#symColumns"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isTCPError"      -> DzKLabel
    "isSymbolicTCPError"      -> DzKLabel
    "#symTCPError"      -> DzKLabel
    "isType"      -> DzKLabel
    "isSymbolicType"      -> DzKLabel
    "#symType"      -> DzKLabel
    "isAlterCommand"      -> DzKLabel
    "isSymbolicAlterCommand"      -> DzKLabel
    "#symAlterCommand"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isCommand"      -> DzKLabel
    "isSymbolicCommand"      -> DzKLabel
    "#symCommand"      -> DzKLabel
    "isExp"      -> DzKLabel
    "isSymbolicExp"      -> DzKLabel
    "#symExp"      -> DzKLabel



%% terminals reject
lexical restrictions
    %% follow restrictions
    "-" -/- [M].[a].[p]
    "String2K" -/- [L].[a].[b].[e].[l]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "*" -/- [F].[l].[o].[a].[t]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "fresh" -/- [I].[d]
    "/" -/- [I].[n].[t]
    "mi" -/- [M].[I].[n].[t]
    "." -/- [M].[a].[p]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "#system" -/- [T].[y].[p].[e].[s]
    "*" -/- [I].[n].[t]
    "#freshSym" -/- [N]
    "#freshSym" -/- [S].[o].[r].[t].[N]
    "=K" -/- [L].[a].[b].[e].[l]
    "=" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "." -/- [L].[i].[s].[t]
    "#freshSymSort" -/- [N]
    "+" -/- [F].[l].[o].[a].[t]
    "fresh" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "+" -/- [I].[n].[t]
    "=" -/- [K].[L].[i].[s].[t]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "+" -/- [S].[t].[r].[i].[n].[g]
    "=" -/- [I].[n].[t]
    "." -/- [S].[e].[t]
    "#stat" -/- [T].[y].[p].[e].[s]
    "-" -/- [S].[e].[t]
    "=/=K" -/- [L].[i].[s].[t]
    "#freshSym" -/- [S].[o].[r].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    "/" -/- [F].[l].[o].[a].[t]
    "=" -/- [M].[a].[p]
context-free restrictions
    NatDzVar -/- [a-zA-Z0-9\{]
    AddDzVar -/- [a-zA-Z0-9\{]
    AttributesDzVar -/- [a-zA-Z0-9\{]
    ValuesDzVar -/- [a-zA-Z0-9\{]
    LowerCaseDzVar -/- [a-zA-Z0-9\{]
    CamelCaseIdDzVar -/- [a-zA-Z0-9\{]
    StringDzVar -/- [a-zA-Z0-9\{]
    ConditionsDzVar -/- [a-zA-Z0-9\{]
    DdropAttributesDzVar -/- [a-zA-Z0-9\{]
    SubstitutionDzVar -/- [a-zA-Z0-9\{]
    BoolDzVar -/- [a-zA-Z0-9\{]
    ListDzVar -/- [a-zA-Z0-9\{]
    StreamDzVar -/- [a-zA-Z0-9\{]
    DzStringDzVar -/- [a-zA-Z0-9\{]
    DzBoolDzVar -/- [a-zA-Z0-9\{]
    DdropAttributeDzVar -/- [a-zA-Z0-9\{]
    AlterCommandsDzVar -/- [a-zA-Z0-9\{]
    DdropDzVar -/- [a-zA-Z0-9\{]
    FloatDzVar -/- [a-zA-Z0-9\{]
    RenameTableDzVar -/- [a-zA-Z0-9\{]
    ExpsDzVar -/- [a-zA-Z0-9\{]
    ValueDzVar -/- [a-zA-Z0-9\{]
    IdDzVar -/- [a-zA-Z0-9\{]
    MapDzVar -/- [a-zA-Z0-9\{]
    AndOrDzVar -/- [a-zA-Z0-9\{]
    DzFloatDzVar -/- [a-zA-Z0-9\{]
    AddAttributeDzVar -/- [a-zA-Z0-9\{]
    SetDzVar -/- [a-zA-Z0-9\{]
    VariableDzVar -/- [a-zA-Z0-9\{]
    StmtsDzVar -/- [a-zA-Z0-9\{]
    RenameColumnAttributeDzVar -/- [a-zA-Z0-9\{]
    AttributeDzVar -/- [a-zA-Z0-9\{]
    MIntDzVar -/- [a-zA-Z0-9\{]
    AddAttributesDzVar -/- [a-zA-Z0-9\{]
    IntDzVar -/- [a-zA-Z0-9\{]
    StmtDzVar -/- [a-zA-Z0-9\{]
    CharDzVar -/- [a-zA-Z0-9\{]
    SubstitutionsDzVar -/- [a-zA-Z0-9\{]
    TablesDzVar -/- [a-zA-Z0-9\{]
    TCPAnswerDzVar -/- [a-zA-Z0-9\{]
    DzIntDzVar -/- [a-zA-Z0-9\{]
    RenameColumnAttributesDzVar -/- [a-zA-Z0-9\{]
    ConditionDzVar -/- [a-zA-Z0-9\{]
    PascalCaseIdDzVar -/- [a-zA-Z0-9\{]
    UpperCaseDzVar -/- [a-zA-Z0-9\{]
    ColumnsDzVar -/- [a-zA-Z0-9\{]
    TCPErrorDzVar -/- [a-zA-Z0-9\{]
    TypeDzVar -/- [a-zA-Z0-9\{]
    AlterCommandDzVar -/- [a-zA-Z0-9\{]
    IOErrorDzVar -/- [a-zA-Z0-9\{]
    CommandDzVar -/- [a-zA-Z0-9\{]
    ExpDzVar -/- [a-zA-Z0-9\{]
    VariableDz -/- [a-zA-Z0-9\{]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "fpNaN" -> IdDz {reject}
    "updateMap" -> IdDz {reject}
    "directionalityChar" -> IdDz {reject}
    "ugtMInt" -> IdDz {reject}
    "usubMInt" -> IdDz {reject}
    "ssubMInt" -> IdDz {reject}
    "removeAll" -> IdDz {reject}
    "K2String" -> IdDz {reject}
    "trim" -> IdDz {reject}
    "categoryChar" -> IdDz {reject}
    "miMInt" -> IdDz {reject}
    "isBinder" -> IdDz {reject}
    "exponentBitsFloat" -> IdDz {reject}
    "sltMInt" -> IdDz {reject}
    "checkSat" -> IdDz {reject}
    "ordChar" -> IdDz {reject}
    "WHERE" -> IdDz {reject}
    "Int2Float" -> IdDz {reject}
    "andMInt" -> IdDz {reject}
    "sinFloat" -> IdDz {reject}
    "size" -> IdDz {reject}
    "getKLabel" -> IdDz {reject}
    "isSymbolicK" -> IdDz {reject}
    "VARCHAR" -> IdDz {reject}
    "insertValues" -> IdDz {reject}
    "minFloat" -> IdDz {reject}
    "tanFloat" -> IdDz {reject}
    "isLocalFreshVar" -> IdDz {reject}
    "subMInt" -> IdDz {reject}
    "String2Base" -> IdDz {reject}
    "Base2String" -> IdDz {reject}
    "getVariables" -> IdDz {reject}
    "SET" -> IdDz {reject}
    "replaceFirst" -> IdDz {reject}
    "isBounding" -> IdDz {reject}
    "KLabel2String" -> IdDz {reject}
    "Bag2String" -> IdDz {reject}
    "acosFloat" -> IdDz {reject}
    "ugeMInt" -> IdDz {reject}
    "xorBool" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "maxInt" -> IdDz {reject}
    "forall" -> IdDz {reject}
    "undef" -> IdDz {reject}
    "atanFloat" -> IdDz {reject}
    "sminMInt" -> IdDz {reject}
    "SMTCall" -> IdDz {reject}
    "rootFloat" -> IdDz {reject}
    "String2Bool" -> IdDz {reject}
    "TO" -> IdDz {reject}
    "isNotAlreadyIn" -> IdDz {reject}
    "sMaxMInt" -> IdDz {reject}
    "isKResult" -> IdDz {reject}
    "ADD" -> IdDz {reject}
    "xorInt" -> IdDz {reject}
    "notBool" -> IdDz {reject}
    "roundFloat" -> IdDz {reject}
    "isNaN" -> IdDz {reject}
    "sgeMInt" -> IdDz {reject}
    "String2K" -> IdDz {reject}
    "ultMInt" -> IdDz {reject}
    "lengthString" -> IdDz {reject}
    "floorFloat" -> IdDz {reject}
    "ltrim" -> IdDz {reject}
    "isBuiltin" -> IdDz {reject}
    "sqrtFloat" -> IdDz {reject}
    "sgtMInt" -> IdDz {reject}
    "overflowMInt" -> IdDz {reject}
    "orBool" -> IdDz {reject}
    "isSymbolicBag" -> IdDz {reject}
    "ashrMInt" -> IdDz {reject}
    "extractMInt" -> IdDz {reject}
    "isCollection" -> IdDz {reject}
    "precisionFloat" -> IdDz {reject}
    "replaceAll" -> IdDz {reject}
    "DROP" -> IdDz {reject}
    "uminMInt" -> IdDz {reject}
    "expFloat" -> IdDz {reject}
    "rfindChar" -> IdDz {reject}
    "String2Bag" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "minusInfinity" -> IdDz {reject}
    "freshId" -> IdDz {reject}
    "signFloat" -> IdDz {reject}
    "negMInt" -> IdDz {reject}
    "sleMInt" -> IdDz {reject}
    "false" -> IdDz {reject}
    "String2Int" -> IdDz {reject}
    "isBound" -> IdDz {reject}
    "ListItem" -> IdDz {reject}
    "fresh" -> IdDz {reject}
    "freshInt" -> IdDz {reject}
    "lshrMInt" -> IdDz {reject}
    "xorMInt" -> IdDz {reject}
    "uaddMInt" -> IdDz {reject}
    "concatenateMInt" -> IdDz {reject}
    "sremMInt" -> IdDz {reject}
    "K2SMTLib" -> IdDz {reject}
    "addMInt" -> IdDz {reject}
    "sMinMInt" -> IdDz {reject}
    "rfindString" -> IdDz {reject}
    "uremMInt" -> IdDz {reject}
    "dummy" -> IdDz {reject}
    "Float2Int" -> IdDz {reject}
    "orMInt" -> IdDz {reject}
    "findString" -> IdDz {reject}
    "dividesInt" -> IdDz {reject}
    "svalueMInt" -> IdDz {reject}
    "saddMInt" -> IdDz {reject}
    "in" -> IdDz {reject}
    "cosFloat" -> IdDz {reject}
    "uleMInt" -> IdDz {reject}
    "Float2String" -> IdDz {reject}
    "isKLabelConstant" -> IdDz {reject}
    "String2DotK" -> IdDz {reject}
    "String2Id" -> IdDz {reject}
    "divInt" -> IdDz {reject}
    "absInt" -> IdDz {reject}
    "bool2Int" -> IdDz {reject}
    "ceilFloat" -> IdDz {reject}
    "chrChar" -> IdDz {reject}
    "bitwidthMInt" -> IdDz {reject}
    "sdivMInt" -> IdDz {reject}
    "randomRandom" -> IdDz {reject}
    "range" -> IdDz {reject}
    "charControl" -> IdDz {reject}
    "plusInfinity" -> IdDz {reject}
    "updateValues" -> IdDz {reject}
    "mIntOfDigits" -> IdDz {reject}
    "VALUES" -> IdDz {reject}
    "UPDATE" -> IdDz {reject}
    "shlMInt" -> IdDz {reject}
    "K2Sort" -> IdDz {reject}
    "cool" -> IdDz {reject}
    "freeVariables" -> IdDz {reject}
    "significandFloat" -> IdDz {reject}
    "String2Float" -> IdDz {reject}
    "exists" -> IdDz {reject}
    "impliesBool" -> IdDz {reject}
    "choice" -> IdDz {reject}
    "andThenBool" -> IdDz {reject}
    "SMTLibQuery" -> IdDz {reject}
    "asinFloat" -> IdDz {reject}
    "smaxMInt" -> IdDz {reject}
    "umaxMInt" -> IdDz {reject}
    "replace" -> IdDz {reject}
    "String2KLabel" -> IdDz {reject}
    "isToken" -> IdDz {reject}
    "substrString" -> IdDz {reject}
    "Vars2SMTLib" -> IdDz {reject}
    "uvalueMInt" -> IdDz {reject}
    "mi" -> IdDz {reject}
    "atan2Float" -> IdDz {reject}
    "countAllOccurences" -> IdDz {reject}
    "Int2String" -> IdDz {reject}
    "checkKey" -> IdDz {reject}
    "null" -> IdDz {reject}
    "absFloat" -> IdDz {reject}
    "Consts2SMTLib" -> IdDz {reject}
    "maxFloat" -> IdDz {reject}
    "AND" -> IdDz {reject}
    "true" -> IdDz {reject}
    "smulMInt" -> IdDz {reject}
    "Char2String" -> IdDz {reject}
    "eqMInt" -> IdDz {reject}
    "umulMInt" -> IdDz {reject}
    "String2Char" -> IdDz {reject}
    "keys" -> IdDz {reject}
    "modInt" -> IdDz {reject}
    "minInt" -> IdDz {reject}
    "values" -> IdDz {reject}
    "orElseBool" -> IdDz {reject}
    "findChar" -> IdDz {reject}
    "logFloat" -> IdDz {reject}
    "uoverflowMInt" -> IdDz {reject}
    "mulMInt" -> IdDz {reject}
    "Id2String" -> IdDz {reject}
    "OR" -> IdDz {reject}
    "soverflowMInt" -> IdDz {reject}
    "exponentFloat" -> IdDz {reject}
    "zeroMInt" -> IdDz {reject}
    "rtrim" -> IdDz {reject}
    "digitsOfMInt" -> IdDz {reject}
    "control" -> IdDz {reject}
    "inKList" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "neMInt" -> IdDz {reject}
    "andBool" -> IdDz {reject}
    "udivMInt" -> IdDz {reject}
    "SMALLINT" -> IdDz {reject}
    "isVariable" -> IdDz {reject}
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    "#" -/- [s].[y].[m]
    DzInt -/-  [0-9]
    Id -/- [A-Za-z0-9\_]
